name: Clean Release Builder

on:
  workflow_dispatch:

jobs:
  release:
    name: Prepare Clean Release Branch
    runs-on: ubuntu-latest
    permissions:
      contents: write

    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
        with:
          fetch-depth: 0  # Needed to push new branches and tags

      - name: Generate Version from UTC Time
        id: generate_version
        run: |
          VERSION=$(date -u "+%y.%m.%d%H%M")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "tag=v$VERSION" >> $GITHUB_OUTPUT
          echo "branch=release-$VERSION" >> $GITHUB_OUTPUT

      - name: Create Clean Branch
        run: |
          git checkout -b ${{ steps.generate_version.outputs.branch }}

      - name: Replace Tokens in Manifest
        uses: cschleiden/replace-tokens@v1
        with:
          files: 'src/module.json'
        env:
          VERSION: ${{ steps.generate_version.outputs.version }}
          URL: https://github.com/${{ github.repository }}
          MANIFEST: https://github.com/${{ github.repository }}/releases/latest/download/module.json
          DOWNLOAD: https://github.com/${{ github.repository }}/releases/download/${{ steps.generate_version.outputs.tag }}/module.zip

      - name: Move Final Manifest to Root
        run: mv src/module.json module.json

      - name: Add New Version to Issue Form
        run: |
          ISSUE_FORM=".github/ISSUE_TEMPLATE/shop-change-request.yml"
          NEW_VERSION="v${{ steps.generate_version.outputs.version }}"

          # Extract current versions (excluding "Older Version")
          current_versions=$(awk '/^ {8}- v[0-9]+\.[0-9]+\.[0-9]+/ {gsub(/^ +- /, "", $0); print $0}' "$ISSUE_FORM")

          # Add the new version to the list if it's not already there
          updated_versions=$(echo -e "$NEW_VERSION\n$current_versions" | grep -v 'Older Version' | sort -r | uniq | head -n 5)

          # Rebuild the YAML with updated version block
          awk -v new_versions="$updated_versions" '
            BEGIN {
              split(new_versions, lines, "\n")
              in_versions = 0
            }
            {
              if ($1 == "options:") {
                print $0
                in_versions = 1
                for (i in lines) {
                  print "        - " lines[i]
                }
                print "        - Older Version"
                next
              }
              if (in_versions && $1 ~ /^ *- /) {
                next
              }
              print $0
            }
          ' "$ISSUE_FORM" > temp.yml && mv temp.yml "$ISSUE_FORM"

          echo "âœ… Updated versions in issue form:"
          echo "$updated_versions"

      - name: Clean Dev Files
        run: |
          rm -rf .github .gitignore .gitattributes foundry-cli-scripts src package.json package-lock.json

      - name: Commit Clean Release
        run: |
          git config user.name "github-actions"
          git config user.email "github-actions@users.noreply.github.com"
          git add .
          git commit -m "Clean release ${{ steps.generate_version.outputs.version }}"

      - name: Push Clean Branch
        run: git push origin HEAD

      - name: Create Tag
        run: |
          git tag ${{ steps.generate_version.outputs.tag }}
          git push origin ${{ steps.generate_version.outputs.tag }}

      - name: Zip Clean Module
        run: zip -r module.zip . -x "*.git*"

      - name: Create GitHub Release
        uses: ncipollo/release-action@v1
        with:
          allowUpdates: true
          tag: ${{ steps.generate_version.outputs.tag }}
          name: Release ${{ steps.generate_version.outputs.version }}
          body: |
            Automated clean release for ${{ steps.generate_version.outputs.version }}
          artifacts: module.zip,module.json
          token: ${{ secrets.GITHUB_TOKEN }}
